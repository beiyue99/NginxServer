










    //setvbuf(stdout,NULL,_IONBF,0); //这个函数. 直接将printf缓冲区禁止， printf就直接输出了。



    //对accept、send和recv而言，事件未发生时errno通常被设置成EAGAIN（意为“再来一次”）或者EWOULDBLOCK（意为“期待阻塞”）
	        //EAGAIN和EWOULDBLOCK应该是一样的值，表示没收到数据，
        // 一般来讲，在ET模式下会出现这个错误，因为ET模式下是不停的recv肯定有一个时刻收到这个errno，
        // 但LT模式下一般是来事件才收，所以不该出现这个返回值



	    //#define EINTR  4，EINTR错误的产生：当阻塞于某个系统调用的一个进程捕获某个信号，且相应信号处理函数返回时，
        // 该系统调用可能返回一个EINTR错误。
        //例如：在socket服务器端，设置了信号捕获机制，有子进程，
        // 当在父进程阻塞于系统调用时由父进程捕获到了一个有效信号时，内核会致使accept返回一个EINTR错误(被中断的系统调用)。

            (err == ECONNABORTED)  
             //对端的连接意外关闭、网络中断、或者连接超时等。由于软件引起的中止而失败


		//ngx_process_events_and_timers() 函数调用了 ngx_epoll_process_events(-1)，
        // 这意味着它会一直等待直到有事件发生。当工作进程在等待事件时，如果接收到信号（例如 SIGINT），
        // 会中断 ngx_epoll_process_events(-1) 的阻塞状态，使得函数返回。
        // 然后，工作进程会继续执行循环中的下一次迭代，从而再次调用 ngx_process_events_and_timers() 函数。



			//针对 当socket可写的时候【发送缓冲区没满】，会不停的触发socket可写事件 ,我们提出两种解决方案
	//b.1)第一种最普遍的解决方案:
	   //需要向socket写数据的时候把socket写事件通知加入到epoll中，等待可写事件，当可写事件来时操作系统会通知咱们；
	    //此时咱们可以调用wirte/send函数发送数据，当发送数据完毕后，把socket的写事件通知从红黑树中移除；
	   //缺点：即使发送很少的数据，也需要把事件通知加入到epoll，写完毕后，有需要把写事件通知从红黑树干掉
	//b.2)改进方案；
	//开始不把socket写事件通知加入到epoll,当我需要写数据的时候，直接调用write/send发送数据；
	  //如果返回了EAGIN【发送缓冲区满了，需要等待可写事件才能继续往缓冲区里写数据】，此时，我再把写事件通知加入到epoll，
	     //此时，就变成了在epoll驱动下写数据，全部数据发送完毕后，再把写事件通知从epoll中干掉；
	//优点：数据不多的时候，可以避免epoll的写事件的增加/删除，提高了程序的执行效率；




	epoll_wait(m_epollhandle,m_events,NGX_MAX_EVENTS,timer);
	//如果timer为-1则一直阻塞，如果timer为0则立即返回，即便没有任何事件
    //返回值：有错误发生返回-1，错误在errno中，比如你发个信号过来，就返回-1，错误信息是(4: Interrupted system call)
    //如果你等待的是一段时间，并且超时了，则返回0；
    //如果返回>0则表示成功捕获到这么多个事件【返回值里】



	//#define ECONNRESET 104 /* Connection reset by peer */
	//如果客户端没有正常关闭socket连接，却关闭了整个运行程序【真是够粗暴无理的，
    // 应该是直接给服务器发送rst包而不是4次挥手包完成连接断开】，那么会产生这个错误            
    //10054(WSAECONNRESET)--远程程序正在连接的时候关闭会产生这个错误--远程主机强迫关闭了一个现有的连接



	EPOLLERR | EPOLLHUP | EPOLLRDHUP
   //客户端关闭，如果服务器端挂着一个写通知事件，则这里个条件是可能成立的


   setsockopt( listen_fd, IPPROTO_TCP, TCP_DEFER_ACCEPT, &timeout, sizeof(int) )
   当客户端发送数据，accept才会返回