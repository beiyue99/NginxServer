




//a)阻塞I/O
	//我调用一个函数，这个函数就卡在在这里，整个程序流程不往下走了【休眠sleep】，该函数卡在这里等待一个事情发生，
	// 只有这个事情发生了，这个函数才会往下走；
     //这种函数，就认为是阻塞函数；accept();
	//这种阻塞，并不好，效率很低；一般我们不会用阻塞方式来写服务器程序，效率低；
	//b)非阻塞I/O：不会卡住，充分利用时间片，执行更高；
	//非阻塞模式的两个鲜明特点：
	//(1)不断的调用accept(),recv()函数来检查有没有数据到来，如果没有，函数会返回一个特殊的错误标记来告诉你，也可能是EAGAIN；

	//三：同步与异步I/O:这两个概念容易和 阻塞/非阻塞混淆；
	//a)异步I/O：调用一个异步I/O函数时，我门要给这个函数指定一个接收缓冲区，我还要给定一个回调函数；
	  //调用完一个异步I/O函数后，该函数会立即返回。 其余判断交给操作系统，操作系统会判断数据是否到来，如果数据到来了，
	  // 操作系统会把数据拷贝到你所提供的缓冲区里，然后调用你所指定的这个回调函数来通知你；


	//很容易区别非阻塞和异步I/O的差别：
	//（1）非阻塞I/O要不停的调用I/O函数来检查数据是否来，如果数据来了，就得卡在I/O函数这里把数据从内核缓冲区复制到用户缓冲区，
	// 然后这个函数才能返回；
	//（2）异步I/O根本不需要不停的调用I/O函数来检查数据是否到来，只需要调用一次，然后就可以干别的事情去了；
	    //内核判断数据到来，拷贝数据到你提供的缓冲区，调用你的回调函数来通知你，你并没有被卡在那里的情况；

