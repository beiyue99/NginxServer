#define _CRT_SECURE_NO_WARNINGS 1
#include<iostream>
using namespace std;
#include<thread>
#include<list>
#include<mutex>
#include <condition_variable>
class A
{
public:
	void inMsgList()
	{
		for (int i = 0; i < 100000; i++)
		{
			cout << "inMsgListï¿½ï¿½ï¿½ï¿½Ö´ï¿½Ð?ï¿?" << "ï¿½ï¿½ï¿½ï¿½Ò»ï¿½ï¿½Ôªï¿½ï¿½:" << " " << i << endl;
			my_mutex1.lock();
			msgRecvList.push_back(i);
			my_cond.notify_one();       //ï¿½ï¿½ï¿½ï¿½wait
			my_mutex1.unlock();
		}
	}
	void outMsgList()
	{
		int command = 0;
		while (1)
		{
			unique_lock<mutex>sbguard1(my_mutex1);
			my_cond.wait(sbguard1, [this]
				//ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ú¶ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½falseï¿½ï¿½waitï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ð?ï¿½Ö±ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ß³Ìµï¿½ï¿½ï¿½notify_oneï¿½ï¿½ï¿½Ù´Î³ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ö¹ï¿½ï¿½ï¿½ï¿½
		//ï¿½ï¿½ï¿½Ã»Ð´ï¿½Ú¶ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ã´Ä¬ï¿½Ï·ï¿½ï¿½ï¿½false
				{
					if (!msgRecvList.empty())   //ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ù»ï¿½ï¿½ï¿?
					{
						return true;
					}
					return false;
				});
			command = msgRecvList.front();
			msgRecvList.pop_front();
			cout << "outï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ê¼Ö´ï¿½Ð?ï¿½ï¿½ï¿½Òªï¿½?³ï¿½ï¿½ï¿½Ôªï¿½ï¿½" << command << "ï¿½ß³ï¿½idÎªï¿½ï¿½" << this_thread::get_id() << endl;
			sbguard1.unlock();//ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ß¼ï¿½ï¿½ï¿½ï¿½È½ï¿½ï¿½ï¿½ ï¿½Ô±ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ß³Ì¿ï¿½ï¿½ï¿½Ö´ï¿½ï¿½  ï¿½ï¿½ï¿½ï¿½Òª×¢ï¿½ï¿½ï¿½ï¿½Ê±ï¿½ï¿½ï¿½ï¿½ï¿½Ñ¾ï¿½ï¿½â¿ªï¿½ï¿½ï¿½ï¿½Ò»ï¿½ï¿½ï¿½ß³Ì¿ï¿½ï¿½ï¿½ï¿½Ù´Îµï¿½ï¿½Ã»ï¿½ï¿½Ñºï¿½ï¿½ï¿½
			//ï¿½ï¿½ï¿½Ç´ï¿½Ê±ï¿½ï¿½ï¿½ß³Ì¿ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ã¦ï¿½Å´ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ß¼ï¿½ï¿½ï¿½ï¿½ï¿½Î´ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ô¸Ã´Î»ï¿½ï¿½ï¿½ï¿½ï¿½Ð§
		}
	}
private:
	list<int > msgRecvList;
	mutex my_mutex1;
	condition_variable my_cond;
};
int  main()
{
	A  a;
	thread myInObj(&A::inMsgList, &a);
	thread myOutObj(&A::outMsgList, &a);
	thread myOutObj2(&A::outMsgList, &a);
	myInObj.join();
	myOutObj.join();
	myOutObj2.join();
}